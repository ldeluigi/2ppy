name: CI/CD

on:
  push:
    branches:
      - "*"
      - "**"
    tags:
      - "*"
  pull_request:

env:
  project-name: 2PPy

defaults:
  run:
    shell: bash

jobs:
  build:
    name: build & test
    strategy:
      matrix:
        os: [ubuntu, windows, macos]
        python-version: ['3.9', '3.10', '3.11']
        include:
          - package: false
          - os: ubuntu
            python-version: '3.9'
            package: true # only build package artifacts once
      fail-fast: false
    runs-on: ${{ matrix.os }}-latest
    outputs:
      artifact-name: ${{ steps.artifact.outputs.artifact-name }}
      version: ${{ steps.artifact.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      - name: Set up Maven with Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          architecture: 'x64'
          cache: maven
      - name: Install build tool
        run: |
          python -m pip install --upgrade pip
      - name: Install CI dependencies
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Build
        run: |
          python -m build --sdist --wheel
      - name: Install
        run: |
          pip install dist/*.whl
      - name: Test
        run: |
          coverage run -m pytest -p no:faulthandler
      - name: Coverage
        run: |
          coverage report -i -m
      - name: Prepare artifacts
        id: artifact
        if: ${{ matrix.package }}
        run: |
          echo 'artifact-name=${{ env.project-name }}-${{ matrix.python-version }}-${{ matrix.os }}' >> "$GITHUB_OUTPUT"
          VERSION=$(python -m setuptools_git_versioning)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
      - name: Upload artifacts
        if: ${{ matrix.package }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.artifact-name }}
          path: |
            dist/*.whl
            dist/*.tar.gz
            LICENSE
      - name: Upload test install script to artifact
        if: ${{ matrix.package }}
        uses: actions/upload-artifact@v3
        with:
          name: test-install-script
          path: test/post_install_test.py

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with Flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          python -m flake8 . --count --statistics

  install:
    strategy:
      matrix:
        os: [ubuntu, windows, macos]
        python-version: ['3.9', '3.10', '3.11']
        install: ['wheel', 'sdist']
      fail-fast: false
    runs-on: ${{ matrix.os }}-latest
    needs: [build]
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.artifact-name }}
      - name: Install from wheel
        if: ${{ matrix.install == 'wheel' }}
        run: |
          pip install dist/*.whl
      - name: Install from sdist
        if: ${{ matrix.install == 'sdist' }}
        run: |
          pip install dist/*.tar.gz
      - name: Pull test file from artifacts
        uses: actions/download-artifact@v3
        with:
          name: test-install-script
      - name: Test installation
        run: |
          python post_install_test.py

  release:
    runs-on: ubuntu-latest
    needs: [build, lint, install]
    concurrency:
      group: release
    if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.artifact-name }}
      - name: GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.build.outputs.version }}
          fail_on_unmatched_files: true
          files: |
            dist/*.whl
            dist/*.tar.gz
            LICENSE

  publish:
    runs-on: ubuntu-latest
    needs: [build, release]
    concurrency:
      group: publish
    environment: test-pypi
    permissions:
      id-token: write
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.artifact-name }}
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
